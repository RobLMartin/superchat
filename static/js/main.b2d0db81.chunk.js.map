{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","App","useAuthState","user","className","ChatRoom","SignIn","SignOut","currentUser","onClick","signOut","provider","GoogleAuthProvider","signInWithPopup","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","dummy","current","scrollIntoView","behavior","useRef","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","messageClass","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,6CAGT,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAWZC,MATf,WAAgB,IAAD,EACEC,YAAaH,GAArBI,EADM,oBAEb,OACE,qBAAKC,UAAU,MAAf,SACE,kCAAUD,EAAO,cAACE,EAAD,IAAe,cAACC,EAAD,SAOtC,SAASC,IACP,OACER,EAAKS,aAAe,wBAAQC,QAAS,kBAAMV,EAAKW,WAA5B,sBAIxB,SAASJ,IAMP,OAAO,wBAAQG,QALU,WACvB,IAAME,EAAW,IAAIrB,IAASS,KAAKa,mBACnCb,EAAKc,gBAAgBF,IAGhB,iCAGT,SAASN,IACP,IAAMS,EAAcd,EAAUe,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAFnC,EAICC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAJW,sBAKgBC,mBAAS,IALzB,mBAKXC,EALW,KAKAC,EALA,KAOZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQ7B,EAAKS,YAAvBqB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAW3C,IAASU,UAAUkC,WAAWC,kBACzCN,MACAC,aATgB,OAYlBN,EAAa,IACbY,EAAMC,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAgBXH,EAAQI,mBAEd,OACE,qCACE,cAACjC,EAAD,IACA,iCACGc,GACCA,EAASoB,KAAI,SAACC,GAAD,OAAS,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAC9C,qBAAKC,IAAKV,OAEZ,uBAAMW,SAAUtB,EAAhB,UACE,uBACEuB,MAAOzB,EACP0B,SAAU,SAACvB,GAAD,OAAOF,EAAaE,EAAEwB,OAAOF,UAEzC,wBAAQG,KAAK,SAAb,wBAMR,SAASR,EAAYS,GAAQ,IAAD,EACMA,EAAMR,QAA9BZ,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SAEbuB,EAAexB,IAAQ9B,EAAKS,YAAYqB,IAAM,OAAS,WAC7D,OACE,sBAAKzB,UAAS,kBAAaiD,GAA3B,UACE,qBAAKC,IAAKxB,IACV,4BAAIE,OCpGV,IAYeuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b2d0db81.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./App.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBqJ8PZTixUZBr0HN2o-1BuRcXb3IAFBSE\",\n  authDomain: \"superchat-e6ec1.firebaseapp.com\",\n  databaseURL: \"https://superchat-e6ec1.firebaseio.com\",\n  projectId: \"superchat-e6ec1\",\n  storageBucket: \"superchat-e6ec1.appspot.com\",\n  messagingSenderId: \"89614244579\",\n  appId: \"1:89614244579:web:22aea7d2f51cc0037c83d6\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction SignOut() {\n  return (\n    auth.currentUser && <button onClick={() => auth.signOut()}>Sign Out</button>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return <button onClick={signInWithGoogle}>Sign in with Google</button>;\n}\n\nfunction ChatRoom() {\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef.orderBy(\"createdAt\").limit(25);\n\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n\n    setFormValue(\"\");\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const dummy = useRef();\n\n  return (\n    <>\n      <SignOut />\n      <main>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n        <div ref={dummy}></div>\n      </main>\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}